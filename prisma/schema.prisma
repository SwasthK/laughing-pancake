generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Authenticator Authenticator[]
  Program       Program[]
  EventHead     EventHead[]
  Participant   Participant[]

  Team Team[] @relation("TeamLeader")
}

//-----------auth------------------------
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Program {
  programId   String @id @default(cuid())
  programSlug String @unique

  //arhived status needed
  creadtedByUserID String

  Poster  Poster?
  Event   Event[]
  Creator User    @relation(fields: [creadtedByUserID], references: [id], onDelete: Cascade)
  Team    Team[]

  @@index([programSlug])
}

model Poster {
  posterId    String   @id @default(cuid())
  title       String
  image       String
  description String //its a json but we are stringifying it
  date        DateTime
  time        DateTime
  endDate     DateTime
  venue       String
  contact     String
  brochure    String
  eventType   String //should be enum
  organizedBy String //should be enum
  link        String? //gogle form link 
  programId   String   @unique

  Program Program @relation(fields: [programId], references: [programId], onDelete: Cascade)
}

model EventHead {
  headId  String @id @default(cuid())
  userId  String
  eventId String

  User  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Event Event @relation(fields: [eventId], references: [eventId], onDelete: Cascade)
}

model Event {
  eventId      String @id @default(cuid())
  programId    String
  name         String
  caption      String
  participants Int

  EventHead   EventHead[]
  Participant Participant[]
  Program     Program       @relation(fields: [programId], references: [programId], onDelete: Cascade)
}

model Team {
  teamId           String     @id @default(cuid())
  teamName         String
  programId        String
  teamLeaderId     String
  teamStatus       TeamStatus
  registrationDate DateTime   @default(now()) //only when team if fully registered (each event have required number dont need to have join every event)

  TeamLeader  User          @relation("TeamLeader", fields: [teamLeaderId], references: [id], onDelete: Cascade)
  Program     Program       @relation(fields: [programId], references: [programId], onDelete: Cascade)
  Participant Participant[]
}

model Participant {
  participantId String   @id @default(cuid())
  userId        String
  eventId       String
  teamId        String
  registeredAt  DateTime @default(now())

  Team  Team  @relation(fields: [teamId], references: [teamId], onDelete: Cascade)
  User  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Event Event @relation(fields: [eventId], references: [eventId], onDelete: Cascade)
}

//TODO:
//1. Team status
//2. Event status
enum TeamStatus {
  PENDING
  REGISTERED
  VERIFIED
  DISQUALIFIED
}
