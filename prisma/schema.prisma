// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Authenticator Authenticator[]
  Event         Event[]
  event_id      String?
}

//default for auth
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  event_id          String   @id @default(cuid())
  event_title       String
  event_description String?
  conver_image      String?
  event_time        DateTime
  event_date        DateTime
  event_location    String
  event_reg_link    String
  contact           String
  user_id           String
  course_id         String

  department_id String?
  user          User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course        Course      @relation(fields: [course_id], references: [course_id])
  Department    Department? @relation(fields: [department_id], references: [department_id])
}

enum CourseName {
  Ba
  BCom
  BSc
  BCA
  BBA
  BVoc
}

enum DepartmentName {
  Psychology
  Physics
  Chemistry
  Mathematics
  ComputerScience
}

model Course {
  course_id   String       @id @default(cuid())
  course_name CourseName
  department  Department[]
  event       Event[]
}

model Department {
  department_id   String         @id @default(cuid())
  department_name DepartmentName
  course_id       String?
  event           Event[]
  Course          Course?        @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
}
